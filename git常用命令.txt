git init ：新建仓库
git checkout：切换分支；
    
git pull：拉取版本；
    
git commit -m "xxxx"：将内容提交到本地版本库，并添加说明
    git commit -asm "TFS_530059:jiangyu_sys_add:for FEATURE_START_PHONE_SYSTEM_READY"
    
git push：
    git push origin HEAD:MSM8952_7.0_Dev
    git push --no-thin
        有时候cherry-pick往上push代码时会被拒绝，这时候可以使用--no-thin
    
更新本地版本库：
git fetch origin 获取origin版本
git rebase origin/QC8926_Int 将QC8926_Int嫁接到origin后面

解决冲突的一般步骤：
1、git fetch origin :远程主机的版本库有了更新,将某个远程主机的更新，全部取回本地
2、git rebase origin/QC8926_Int:用于把一个分支的修改合并到当前分支
3、解决冲突
4、git add
5、git rebase --continue:应用补丁
6、git push origin HEAD:refs/for/QC8926_Int (其中refs/for/表示需要经过代码走读code review后才能提交，这是gerrit的语法)

回退操作：
git reset --soft commit-id 回退到某一个版本，保留工作区和缓存区的内容
git reset --hard commit-id 回退到某一个版本，工作区和缓存区的内容都会丢失

git diff 
    查看异同，比较的是工作区和暂存区的差别

git status 
    查看当前的状态
    
git show commit-id
    显示某一个版本的信息
    
git log
    查看git的日志信息
    
git cat .git/config
    查看当前git的配置信息
    
git cherry-pick commit-id
    用于把另一个本地分支的commit修改应用到当前分支
    
tree
    查看当前下的文件树
    
拷贝钩子到本地：
    //这里的服务器地址10.1.20.32根据自己的情况而定
    scp -P 29418 -p 10.1.20.32:/hooks/commit-msg .git/hooks/
    
git log filename
    可以看到fileName相关的commit记录
 
git show commit-id filename
    只看某次提交中的某个文件变化
    
git log -p filename
    可以显示每次提交的diff
    
git log --pretty=oneline
    将每条log显示在一行
    
git push --no-thin
    error Missing tree 在服务器没有这个目录时，如果上传的话，一般就会报这个错误
    
git reflog
    显示记录中的每一次命令，找回命令历史，结合git reset --hard commit-id跳转到未来
    
git checkout -- file:撤销修改
    git checkout:其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”.
    
git remote add：将本地仓库与远程仓库关联起来
    //添加后，远程库的名字就是origin
    git remote add origin git@github.com:michaelliao/learngit.git
    
要关联一个远程库，使用命令
    git remote add origin git@server-name:path/repo-name.git
关联后，使用命令
    git push -u origin master第一次推送master分支的所有内容
此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改

创建分支：
    //创建dev分支，并切换到dev分支
    git checkout -b dev

合并分支:
    //合并指定分支dev到当前分支master，这里会提示fast-forward，说明这次合并是“快进模式”，也就是直接把master指向dev的当前提交
    git merge dev
    
删除分支：
    //删除dev分支
    git branch -d dev