git init 
    新建仓库
    
git checkout
    切换分支 

git pull
    拉取版本
    
强制覆盖本地与服务器同步
    git fetch --all
    git reset --hard origin/[分支]
    git pull
    
git add -f
    强制添加文件
    
git check-ignore
    检查.gitignore文件中的忽略文件配置，例如：
        //输出的日志显示.gitignore的第3行规则忽略了该文件
        git check-ignore -v App.class
        .gitignore:3:*.class    App.class
    
git commit -m "xxxx"：将内容提交到本地版本库，并添加说明
    git commit -asm "TFS_530059:jiangyu_sys_add:for FEATURE_START_PHONE_SYSTEM_READY"
    
git push：
    git push origin HEAD:MSM8952_7.0_Dev
    git push --no-thin
        有时候cherry-pick往上push代码时会被拒绝，这时候可以使用--no-thin
    
更新本地版本库：
    git fetch origin 获取origin版本
    git rebase origin/QC8926_Int 将QC8926_Int嫁接到origin后面

解决冲突的一般步骤：
1、git fetch origin :远程主机的版本库有了更新,将某个远程主机的更新，全部取回本地
2、git rebase origin/QC8926_Int:用于把一个分支的修改合并到当前分支
3、解决冲突
4、git add
5、git rebase --continue:应用补丁
6、git push origin HEAD:refs/for/QC8926_Int (其中refs/for/表示需要经过代码走读code review后才能提交，这是gerrit的语法)

回退操作：
    git reset --soft commit-id 回退到某一个版本，保留工作区和缓存区的内容
    git reset --hard commit-id 回退到某一个版本，工作区和缓存区的内容都会丢失

git diff 
    查看异同，比较的是工作区和暂存区的差别

git status 
    查看当前的状态
    
git show commit-id
    显示某一个版本的信息
    
git log
    查看git的日志信息
    
git cat .git/config
    查看当前git的配置信息
    
git cherry-pick commit-id
    用于把另一个本地分支的commit修改应用到当前分支
    
tree
    查看当前下的文件树
    
拷贝钩子到本地：
    //这里的服务器地址10.1.20.32根据自己的情况而定
    scp -P 29418 -p 10.1.20.32:/hooks/commit-msg .git/hooks/
    
git log filename
    可以看到fileName相关的commit记录
 
git show commit-id filename
    只看某次提交中的某个文件变化
    
git log -p filename
    可以显示每次提交的diff
    
git log --pretty=oneline
    将每条log显示在一行
    
git push --no-thin
    error Missing tree 在服务器没有这个目录时，如果上传的话，一般就会报这个错误
    
git reflog
    显示记录中的每一次命令，找回命令历史，结合git reset --hard commit-id跳转到未来
    
git checkout -- file:撤销修改
    git checkout:其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”.
    例如：
    // 撤销本地对1.txt文件的修改
    git checkout 1.txt
        
git remote add：将本地仓库与远程仓库关联起来
    //添加后，远程库的名字就是origin
    git remote add origin git@github.com:michaelliao/learngit.git
    
要关联一个远程库，使用命令
    git remote add origin git@server-name:path/repo-name.git
关联后，使用命令
    git push -u origin master第一次推送master分支的所有内容
此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改

创建分支：
    git branch <branch-name>

创建+切换分支：
    //创建dev分支，并切换到dev分支
    git checkout -b dev

合并分支:
    //合并指定分支dev到当前分支master，这里会提示fast-forward，说明这次合并是“快进模式”，也就是直接把master指向dev的当前提交
    git merge dev
    
git log --graph:查看分支合并图
    //每条提交显示在一行，每次提交的commit号简略显示
    git log --graph --pretty=oneline --abbrev-commit
    
删除分支：
    //删除dev分支
    git branch -d dev
    
//只显示最近3条日志
git log -3

//将add 和 commit合并一起提交
git commit -am "xxx"

//不以fast-forward的形式合并分支，保留commit历史信息
--no-ff
    git merge --no-ff -m "merge with no-ff" dev

git stash
    可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作
git stash list
    查看当前的stash列表
git stash pop
    恢复stash的内容，并把stash删除

git push —-force
    强制推送到服务器
    
开发一个新feature，最好新建一个分支，例如：
    //新建了feature-vulcan分支
    git checkout -b feature-vulcan
    
如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除，例如：
    //强行删除了上面没有合并的feature-vulcan分支
    git branch -D feature-vulcan
    
推动分支：
    //将本地dev分支推动到远程origin仓库
    git push origin dev
    

联合开发的一般步骤：
    
    查看远程库信息，使用git remote -v；

    本地新建的分支如果不推送到远程，对其他人就是不可见的；

    从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；

    在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；

    建立本地分支和远程分支的关联，使用
        git branch --set-upstream branch-name origin/branch-name；

    从远程抓取分支，使用git pull，如果有冲突，要先处理冲突
    
标签：
    命令git tag <name>用于新建一个标签，默认为HEAD，也可以指定一个commit id，例如：
        //在commit id为6224937上的commit上打上v0.9标签
        git tag v0.9 6224937
    git tag -a <tagname> -m "blablabla..."可以指定标签信息，例如：
        git tag -a v0.1 -m "version 0.1 released" 3628164
    命令git tag可以查看所有标签
    推送标签：
        //将本地的标签推动到服务器
        git push origin <tagname>
        //推送全部未推送过的本地标签
        git push origin --tags
    删除本地标签：
        git tag -d <tagname>
    删除远程标签：要删除远程标签前，先删除本地标签，再使用push删除远程标签
        git push origin :refs/tags/<tagname>
    
git remote update:
    更新所有的远程仓库，这样使用git branch -a后就可以查看所有的分支了。
    
git push origin --delete [分支名]
// 注意首先将分支的保护去掉
git push origin --delete Android4.2.0_VAS_LuckyGift_Strike
    删除远程分支
    
